plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories here
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Testing dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"
    testImplementation "org.mockito:mockito-core:5.8.0"
    
    // Fabric test modules
    testImplementation "net.fabricmc:fabric-loader-testing:${project.loader_version}"
    testImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Server testing utilities
    testImplementation 'org.apache.commons:commons-io:1.3.2'
}

processResources {
    inputs.property "version", project.version
    
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Task to prepare test server
task setupTestServer {
    doLast {
        def serverDir = file("run/server")
        serverDir.mkdirs()
        
        // Download server jar if it doesn't exist
        def serverJar = file("run/server/server.jar")
        if (!serverJar.exists()) {
            def serverUrl = "https://meta.fabricmc.net/v2/versions/loader/${project.minecraft_version}/${project.loader_version}/0.11.2/server/jar"
            new URL(serverUrl).withInputStream { i ->
                serverJar.withOutputStream { it << i }
            }
        }
        
        // Create eula.txt
        def eulaFile = file("run/server/eula.txt")
        eulaFile.text = "eula=true"
        
        // Create server.properties
        def propsFile = file("run/server/server.properties")
        if (!propsFile.exists()) {
            propsFile.text = """
                online-mode=false
                spawn-protection=0
                level-type=flat
                gamemode=creative
                difficulty=peaceful
                max-players=10
                server-port=25565
            """.stripIndent()
        }
    }
}

// Task to deploy mod to test server
task deployToTestServer(type: Copy, dependsOn: [build, setupTestServer]) {
    from("build/libs") {
        include "*${project.version}.jar"
        exclude "*-dev.jar", "*-sources.jar"
    }
    into "run/server/mods"
}
